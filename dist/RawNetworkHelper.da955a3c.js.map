{"mappings":";;;;;;;;;;;AAiBO,MAAM,kDAAsB,CAAA,GAAA,yCAAU;;;IAC3C,YAAY,OAAe,EAAE,KAAuB,EAAE,AAAgB,UAAmB,EAAE,AAAgB,GAAY,EAAE,KAAW,CAAE;QACpI,KAAK,CAAC,SAAS,OAAO,aAD8C,aAAA,iBAAqC,MAAA;QAEzG,IAAI,CAAC,IAAI,GAAG;IACd;AACF;AAQO,MAAM;IACX;;;;;;;;;;;;GAYC,GACD,aAAa,SAAS,SAAiB,EAAE,QAAgB,EAAE,UAA2B,CAAC,CAAC,EAAqB;QAC3G,yBAAyB;QACzB,IAAI;QACJ,IAAI;YACF,MAAM,IAAI,CAAA,GAAA,UAAE,EAAE;QAChB,EAAE,OAAO,KAAK;YACZ,MAAM,IAAI,0CAAc,CAAC,aAAa,EAAE,WAAW,EAAE,KAAK,WAAW;QACvE;QAEA,oBAAoB;QACpB,IAAI,IAAI,QAAQ,KAAK,WAAW,IAAI,QAAQ,KAAK,UAC/C,MAAM,IAAI,0CAAc,CAAC,sBAAsB,EAAE,IAAI,QAAQ,EAAE;QAGjE,0BAA0B;QAC1B,2CAA2C;QAC3C,0DAA0D;QAE1D,MAAM,WAAE,UAAU,gBAAO,UAAU,CAAC,GAAG,GAAG;QAE1C,OAAO,IAAI,QAAkB,CAAC,SAAS;YACrC,MAAM,aAAa,CAAA,GAAA,SAAC,EAAE,iBAAiB,CAAC;YACxC,IAAI,WAAqB;gBACvB,MAAM;gBACN,MAAM;0BACN;YACF;YAEA,MAAM,WAAW,IAAI,QAAQ,KAAK,WAAW,CAAA,GAAA,YAAI,IAAI,CAAA,GAAA,WAAG;YACxD,MAAM,UAAU,SAAS,GAAG,CAAC,KAAK;yBAAE;yBAAS;YAAQ,GAAG,CAAC;gBACvD,sCAAsC;gBACtC,IAAI,SAAS,UAAU,KAAK,OAAO,SAAS,UAAU,KAAK,KAAK;oBAC9D,MAAM,cAAc,SAAS,OAAO,CAAC,QAAQ;oBAC7C,IAAI,CAAC,aAAa;wBAChB,OAAO,IAAI,0CAAc,kCAAkC,WAAW,SAAS,UAAU,EAAE;wBAC3F;oBACF;oBAEA,yCAAiB,QAAQ,CAAC,aAAa,UAAU,SAAS,IAAI,CAAC,SAAS,KAAK,CAAC;oBAC9E;gBACF;gBAEA,4BAA4B;gBAC5B,IAAI,SAAS,UAAU,KAAK,KAAK;oBAC/B,OACE,IAAI,0CACF,CAAC,yBAAyB,EAAE,SAAS,UAAU,EAAE,EACjD,EAAE;oBACF,WACA,SAAS,UAAU,EACnB;oBAGJ;gBACF;gBAEA,gBAAgB;gBAChB,WAAW;oBACT,MAAM,SAAS,OAAO,CAAC,eAAe,IAAI;oBAC1C,MAAM,SAAS,SAAS,OAAO,CAAC,iBAAiB,IAAI,KAAK;8BAC1D;gBACF;gBAEA,SAAS,IAAI,CAAC;YAChB;YAEA,QAAQ,EAAE,CAAC,SAAS,CAAC;gBACnB,WAAW,OAAO;gBAClB,CAAA,GAAA,SAAC,EAAE,MAAM,CAAC,UAAU;oBAClB,OAAO,IAAI,0CAAc,CAAC,eAAe,EAAE,IAAI,OAAO,EAAE,EAAE,KAAK,WAAW;gBAC5E;YACF;YACA,QAAQ,EAAE,CAAC,WAAW;gBACpB,QAAQ,OAAO;gBACf,WAAW,OAAO;gBAClB,CAAA,GAAA,SAAC,EAAE,MAAM,CAAC,UAAU;oBAClB,OAAO,IAAI,0CAAc,CAAC,yBAAyB,EAAE,QAAQ,EAAE,CAAC,EAAE,WAAW,WAAW;gBAC1F;YACF;YAEA,6BAA6B;YAC7B,WAAW,EAAE,CAAC,UAAU;gBACtB,WAAW,KAAK,CAAC,IAAM,QAAQ;YACjC;YACA,4BAA4B;YAC5B,WAAW,EAAE,CAAC,SAAS,CAAC;gBACtB,WAAW,OAAO;gBAClB,CAAA,GAAA,SAAC,EAAE,MAAM,CAAC,UAAU;oBAClB,OAAO,IAAI,0CAAc,CAAC,mBAAmB,EAAE,IAAI,OAAO,EAAE,EAAE,KAAK,WAAW;gBAChF;YACF;QACF;IACF;AACF","sources":["src/libs/RawNetworkHelper.ts"],"sourcesContent":["import http from 'http'\r\nimport https from 'https'\r\nimport fs from 'fs'\r\nimport { URL } from 'url'\r\nimport { CustomError } from '../models/CustomError'\r\n\r\nexport interface FileInfo {\r\n  mime: string\r\n  size: number\r\n  filePath: string\r\n}\r\n\r\nexport interface DownloadOptions {\r\n  timeout?: number\r\n  headers?: Record<string, string>\r\n}\r\n\r\nexport class DownloadError extends CustomError {\r\n  constructor(message: string, error?: Error | unknown, public readonly statusCode?: number, public readonly url?: string, extra?: any) {\r\n    super(message, error, extra)\r\n    this.name = 'DownloadError'\r\n  }\r\n}\r\n\r\n/*\r\n      In Node.js: Axios uses the built-in http and https modules. \r\n      This means that when you use Axios in a Node.js environment, \r\n      it's essentially a wrapper around these core modules, \r\n      providing a higher-level API and additional features.\r\n      */\r\nexport class RawNetworkHelper {\r\n  /**\r\n   * This is stream download using raw http/https API\r\n   * Real-world performance example for a 1GB file:\r\n\r\nStream implementation: ~100MB memory usage\r\nfetch()/axios: ~1.1GB memory usage (entire file + overhead)\r\n\r\nHowever, there are cases where fetch() or axios might be preferred:\r\n\r\nIf you need to process the file in memory anyway\r\nFor very small files where the overhead doesn't matter\r\nWhen you need the additional features these libraries provide (like automatic retries, request interception, etc.)\r\n   */\r\n  static async download(urlString: string, filePath: string, options: DownloadOptions = {}): Promise<FileInfo> {\r\n    // Validate and parse URL\r\n    let url: URL\r\n    try {\r\n      url = new URL(urlString)\r\n    } catch (err) {\r\n      throw new DownloadError(`Invalid URL: ${urlString}`, err, undefined, urlString)\r\n    }\r\n\r\n    // Validate protocol\r\n    if (url.protocol !== 'http:' && url.protocol !== 'https:') {\r\n      throw new DownloadError(`Unsupported protocol: ${url.protocol}`)\r\n    }\r\n\r\n    // Ensure directory exists\r\n    // const directory = path.dirname(filePath)\r\n    // await fs.promises.mkdir(directory, { recursive: true })\r\n\r\n    const { timeout = 30000, headers = {} } = options\r\n\r\n    return new Promise<FileInfo>((resolve, reject) => {\r\n      const fileStream = fs.createWriteStream(filePath)\r\n      let fileInfo: FileInfo = {\r\n        mime: '',\r\n        size: 0,\r\n        filePath\r\n      }\r\n\r\n      const protocol = url.protocol === 'https:' ? https : http\r\n      const request = protocol.get(url, { timeout, headers }, (response) => {\r\n        // Support download via http redirects\r\n        if (response.statusCode === 301 || response.statusCode === 302) {\r\n          const redirectUrl = response.headers.location\r\n          if (!redirectUrl) {\r\n            reject(new DownloadError('Redirect location not provided', undefined, response.statusCode, urlString))\r\n            return\r\n          }\r\n\r\n          RawNetworkHelper.download(redirectUrl, filePath, options).then(resolve).catch(reject)\r\n          return\r\n        }\r\n\r\n        // Handle error status codes\r\n        if (response.statusCode !== 200) {\r\n          reject(\r\n            new DownloadError(\r\n              `Raw download file error. ${response.statusCode}`,\r\n              //\r\n              undefined,\r\n              response.statusCode,\r\n              urlString\r\n            )\r\n          )\r\n          return\r\n        }\r\n\r\n        // Set file info\r\n        fileInfo = {\r\n          mime: response.headers['content-type'] || '',\r\n          size: parseInt(response.headers['content-length'] || '0', 10),\r\n          filePath\r\n        }\r\n\r\n        response.pipe(fileStream)\r\n      })\r\n\r\n      request.on('error', (err) => {\r\n        fileStream.destroy()\r\n        fs.unlink(filePath, () => {\r\n          reject(new DownloadError(`Network error: ${err.message}`, err, undefined, urlString))\r\n        })\r\n      })\r\n      request.on('timeout', () => {\r\n        request.destroy()\r\n        fileStream.destroy()\r\n        fs.unlink(filePath, () => {\r\n          reject(new DownloadError(`Download timed out after ${timeout}ms`, undefined, undefined, urlString))\r\n        })\r\n      })\r\n\r\n      // Handle successful download\r\n      fileStream.on('finish', () => {\r\n        fileStream.close(() => resolve(fileInfo))\r\n      })\r\n      // Handle file system errors\r\n      fileStream.on('error', (err) => {\r\n        fileStream.destroy()\r\n        fs.unlink(filePath, () => {\r\n          reject(new DownloadError(`File system error: ${err.message}`, err, undefined, urlString))\r\n        })\r\n      })\r\n    })\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"RawNetworkHelper.da955a3c.js.map","sourceRoot":"../"}