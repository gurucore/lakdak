{"mappings":";;;ACAO,SAAS,4CAAQ;IACtB,OAAO;AACT;;ADFA;AEAA,8BAA8B;AAE9B;AAKe;IACb,4FAIC,GACD,OAAO,4BAA4B,SAAS,IAAI,EAAU;QACxD,MAAM,oBAAoB,OAAO,MAAM,CAAC,CAAA,GAAA,yDAAE,AAAD,EAAE,iBAAiB,IACzD,MAAM,CAAC,CAAC,GAAG,IAAM;YAChB,IAAI,EAAE,MAAM,CAAC;YACb,OAAO;QACT,GAAG,EAAE,EACJ,MAAM,CAAC,CAAC,UAAE,OAAM,WAAE,QAAO,EAAE,GAAK;YAC/B,OAAO,OAAO,WAAW,GAAG,OAAO,CAAC,WAAW;QACjD,GACC,GAAG,CAAC,CAAC,WAAE,QAAO,EAAE,GAAK;QACxB,MAAM,oBAAoB,kBAAkB,IAAI,CAAC;QACjD,OAAO;IACT;IAEA,gHAIC,GACD,OAAc,qBAAqB,GAAG,EAAE;QACtC,0DAA0D;QAC1D,yEAAyE;QACzE,OAAO,KAAK,QAAQ,iBAAiB,KAAK,OAAO,CAAC,kBAAkB;IACtE;AACF;;;;;;;;;;;ACrCA,8BAA8B;AAE9B;AAEe;IACb,mGAKC,GACD,OAAO,KAAK,KAAwB,EAAE,YAAY,QAAQ,EAAU;QAClE,IAAI,CAAC,OAAO;QAEZ,OAAO,CAAA,GAAA,yDAAM,AAAD,EAAE,UAAU,CAAC,WAAW,MAAM,CAAC,OAAO,MAAM,CAAC;IAC3D;IAEA,sKAIC,GACD,OAAO,mBAAmB,gBAAgB,IAAI,EAA+D;QAC3G,MAAM,aAAE,UAAS,cAAE,WAAU,EAAE,GAAG,CAAA,GAAA,yDAAM,AAAD,EAAE,mBAAmB,CAAC,OAAO;2BAClE;YACA,mBAAmB;gBACjB,MAAM;gBACN,QAAQ;YACV;YACA,oBAAoB;gBAClB,MAAM;gBACN,QAAQ;YACV;QACF;QACA,OAAO;uBAAE;wBAAW;QAAW;IACjC;IAEA,0PAMC,GACD,OAAO,YAAY,SAAS,EAAE,SAAiB,EAAU;QACvD,MAAM,gBAAgB,CAAA,GAAA,yDAAM,AAAD,EAAE,aAAa,CACxC;YACE,KAAK;YACL,SAAS,CAAA,GAAA,yDAAM,AAAD,EAAE,SAAS,CAAC,sBAAsB;YAChD,UAAU;QACZ,GACA,OAAO,IAAI,CAAC;QAEd,OAAO,cAAc,QAAQ,CAAC;IAChC;IAEA,kQAMC,GACD,OAAO,YAAY,UAAU,EAAE,mBAA2B,EAAU;QAClE,MAAM,gBAAgB,CAAA,GAAA,yDAAM,AAAD,EAAE,cAAc,CACzC;YACE,KAAK;YACL,uDAAuD;YACvD,2DAA2D;YAC3D,wCAAwC;YACxC,SAAS,CAAA,GAAA,yDAAM,AAAD,EAAE,SAAS,CAAC,sBAAsB;YAChD,UAAU;QACZ,GACA,OAAO,IAAI,CAAC,qBAAqB;QAEnC,OAAO,cAAc,QAAQ,CAAC;IAChC;AACF;;;;;;;;;;;;;;;;;;;;;;;;AC7EA,sCAAsC,GACtC,AAAe;IACb,uFAIC,GACD,OAAc,mBAAmB,GAAG,EAAE;QACpC,MAAM,OAAO,KAAK,SAAS,eAAe,QAAQ,WAAW;QAE7D,OAAO;IACT;AACF;;;;;","sources":["src/index.ts","src/libs/lib.ts","src/libs/DevOpsHelper.ts","src/libs/SecurityHelper.ts","src/libs/HttpProtocolHelper.ts"],"sourcesContent":["export { hello as testFunction } from './libs/lib'\r\n\r\nimport DevOpsHelper from './libs/DevOpsHelper'\r\nimport SecurityHelper from './libs/SecurityHelper'\r\nimport HttpProtocolHelper from './libs/HttpProtocolHelper'\r\nexport { DevOpsHelper, SecurityHelper, HttpProtocolHelper }\r\n","export function hello() {\r\n  return 1;\r\n}\r\n","/// <reference types=\"node\" />\r\n\r\nimport os from 'os'\r\n\r\n/**\r\n * Helper to  inspect, check, analyse command send to chatbot\r\n */\r\nexport default class DevOpsHelper {\r\n  /**\r\n   * Get current server IP address\r\n   * @param ipType \"v4\" or \"v6\"\r\n   * @returns\r\n   */\r\n  static getCurrentServerIpAddresses(ipType = 'v4'): string {\r\n    const networkInterfaces = Object.values(os.networkInterfaces())\r\n      .reduce((r, a) => {\r\n        r = r.concat(a)\r\n        return r\r\n      }, [])\r\n      .filter(({ family, address }) => {\r\n        return family.toLowerCase().indexOf(ipType) >= 0 && address !== '127.0.0.1'\r\n      })\r\n      .map(({ address }) => address)\r\n    const serverIpAddresses = networkInterfaces.join(', ')\r\n    return serverIpAddresses\r\n  }\r\n\r\n  /**\r\n   * Get IP from request (if behind proxy, use X-Forwarded-For header)\r\n   * @param req\r\n   * @returns\r\n   */\r\n  public static extractIpFromRequest(req) {\r\n    // TODO: should improve this func to whitelist the proxies\r\n    // TODO: should use this library https://www.npmjs.com/package/request-ip\r\n    return req?.socket?.remoteAddress || req?.headers['x-forwarded-for']\r\n  }\r\n}\r\n","/// <reference types=\"node\" />\r\n\r\nimport crypto from 'crypto'\r\n\r\nexport default class SecurityHelper {\r\n  /**\r\n   *\r\n   * @param input\r\n   * @param algorithm  \"sha1\" \"sha256\"\r\n   * @returns hex string\r\n   */\r\n  static hash(input: crypto.BinaryLike, algorithm = 'sha256'): string {\r\n    if (!input) return\r\n\r\n    return crypto.createHash(algorithm).update(input).digest('hex')\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param modulusLength effective key size 2048 bit (good until 2030), after 2030, use 3072 bit\r\n   * @returns keypair: object of public and private\r\n   */\r\n  static generateRSAKeyPair(modulusLength = 2048): { publicKey: string | Buffer; privateKey: string | Buffer } {\r\n    const { publicKey, privateKey } = crypto.generateKeyPairSync('rsa', {\r\n      modulusLength,\r\n      publicKeyEncoding: {\r\n        type: 'spki',\r\n        format: 'pem'\r\n      },\r\n      privateKeyEncoding: {\r\n        type: 'pkcs8',\r\n        format: 'pem'\r\n      }\r\n    })\r\n    return { publicKey, privateKey }\r\n  }\r\n\r\n  /**\r\n   * Encrypt using publicKey, the encrypted data is in the form of bytes, so we print it in base64 format\r\n   * so that it's displayed in a more readable form\r\n   * @param publicKey\r\n   * @param plainText\r\n   * @returns String base64 format\r\n   */\r\n  static encryptText(publicKey, plainText: string): string {\r\n    const encryptedData = crypto.publicEncrypt(\r\n      {\r\n        key: publicKey,\r\n        padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,\r\n        oaepHash: 'sha256'\r\n      },\r\n      Buffer.from(plainText)\r\n    )\r\n    return encryptedData.toString('base64')\r\n  }\r\n\r\n  /**\r\n   * decrypt using privateKey. The decrypted data is of the Buffer type,\r\n   * which we can convert to a string to reveal the original data\r\n   * @param privateKey\r\n   * @param encryptedTextBase64 String in base64 format\r\n   * @returns utf-8 string\r\n   */\r\n  static decryptText(privateKey, encryptedTextBase64: string): string {\r\n    const decryptedData = crypto.privateDecrypt(\r\n      {\r\n        key: privateKey,\r\n        // In order to decrypt the data, we need to specify the\r\n        // same hashing function and padding scheme that we used to\r\n        // encrypt the data in the previous step\r\n        padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,\r\n        oaepHash: 'sha256'\r\n      },\r\n      Buffer.from(encryptedTextBase64, 'base64')\r\n    )\r\n    return decryptedData.toString('utf8')\r\n  }\r\n}\r\n","/** Helper to work with HTTP Protocol */\r\nexport default class HttpProtocolHelper {\r\n  /**\r\n   * extract bearer token from request header\r\n   * @param req\r\n   * @returns\r\n   */\r\n  public static extractBearerToken(req) {\r\n    const hash = req?.headers?.authorization?.replace(\"Bearer \", \"\")\r\n\r\n    return hash\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"lakdak.es.js.map","sourceRoot":"../"}